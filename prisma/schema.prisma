// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String            @unique
  password        String
  isVat           Boolean           @default(false)
  emailVerified   Boolean           @default(false)
  otp             Int?
  role            Roles
  canUploadOrder  Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  ProductApproval ProductApproval[]
  Product         Product[]
  OrderUpload     OrderUpload[]
  Payment         Payment[]

  @@map("users")
}

model Payment {
  id               Int         @id @default(autoincrement())
  paymentType      PaymentType @default(Debit)
  amount           Decimal     @default(0) @db.Decimal(5, 2)
  availableBalance Decimal     @default(0) @db.Decimal(5, 2)
  description      String?
  userId           Int
  createdAt        DateTime    @default(now())
  user             User        @relation(fields: [userId], references: [id])
}

model ProductApproval {
  id        Int      @id @default(autoincrement())
  csv       String
  status    Status   @default(Pending)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  remarks   String?  @db.LongText
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("products_approval")
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  sku         String      @unique
  description String?
  quantity    Int
  price       Decimal?    @db.Decimal(5, 2)
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  image       String?
  weight      Decimal     @db.Decimal(5, 2)
  location    String?
  packaging   Packaging?
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  OrderLine   OrderLine[]

  @@map("products")
}

model OrderUpload {
  id          Int         @id @default(autoincrement())
  csv         String
  invoice     String?
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Decimal?    @db.Decimal(5, 2)
  paid        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  delivered   Boolean     @default(false)
  OrderLine   OrderLine[]
}

model OrderLine {
  id              Int         @id @default(autoincrement())
  orderId         Int
  order           OrderUpload @relation(fields: [orderId], references: [id])
  productSku      String
  product         Product     @relation(fields: [productSku], references: [sku])
  productQuantity Int
  buyerName       String
  buyerAddress1   String
  buyerAddress2   String?
  buyerCity       String
  buyerCountry    String
  buyerPostCode   String
  trackingNo      String?
  trackingCompany String?
  createdAt       DateTime    @default(now())
  updateAt        DateTime    @updatedAt
}

model Postage {
  id          Int      @id @default(autoincrement())
  weight_from Int
  weight_to   Int
  price       Decimal  @db.Decimal(5, 2)
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

enum Roles {
  Customer
  Client
  Admin
}

enum Status {
  Pending
  Approved
  Rejected
}

enum Packaging {
  Parcel
  Large
}

enum PaymentType {
  Debit
  Credit
}
